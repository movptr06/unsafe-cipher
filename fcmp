#!/usr/bin/env python3

import os
import argparse

from base64 import b64encode, b64decode

from fcmp import fcmp_keygen_file, fcmp_encrypt, fcmp_decrypt

DESCRIPTION = "Fast Cipher Message Protocol 1.0"

FILENAME_HELP = "File to encrypt/decrypt"
KEYGEN_HELP = "Generate new FCMP keys"
KEY_HELP = "Choosing a path for keys"
ENCRYPT_HELP = "Encrypt file with public_key"
OUTPUT_HELP = "Select output file"

DIR = ".fcmp"
PRIVATE_FILE = "pvt"
PUBLIC_FILE = "pub"

def keygen(key_path):
    private_file = key_path + "/" + PRIVATE_FILE
    public_file = key_path + "/" + PUBLIC_FILE
    res = fcmp_keygen_file(private_file, public_file)
    return res

def getkey(key_path):
    return

def encrypt():
    return

def decrypt():
    return

def gethome():
    return os.path.expanduser("~")

def getargs():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument("file", metavar="file", nargs="?", default=None, help=FILENAME_HELP)
    parser.add_argument("-kg", action="store_true", help=KEYGEN_HELP)
    parser.add_argument("-k", metavar="path", help=KEY_HELP)
    parser.add_argument("-e", metavar="public_key", help=ENCRYPT_HELP)
    parser.add_argument("-o", metavar="output", help=OUTPUT_HELP)

    return parser.parse_args()

def main():
    args = getargs()

    if args.k:
        key_path = args.k
    else:
        key_path = gethome() + "/" + DIR

    os.makedirs(key_path, exist_ok=True)

    if args.kg:
        keygen(key_path)
        exit(0)

    private, public = getkey(key_path)
    filename = args.file

    if args.e:
        encrypt()
    else:
        decrypt()

    exit(0)

if __name__ == "__main__":
    main()
