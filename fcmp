#!/usr/bin/env python3

import os
import os.path
import argparse

from fcmp import *

DESCRIPTION = "Fast Cipher Message Protocol 1.0"

FILENAME_HELP = "File to encrypt/decrypt"
KEYGEN_HELP = "Generate new FCMP keys"
KEY_HELP = "Choosing a path for keys"
ENCRYPT_HELP = "Encrypt file with public_key"
OUTPUT_HELP = "Select output file"

DIR = ".fcmp"
PRIVATE_FILE = "pvt"
PUBLIC_FILE = "pub"

def keygen(key_path):
    private_file = key_path + "/" + PRIVATE_FILE
    public_file = key_path + "/" + PUBLIC_FILE
    res = fcmp_keygen_file(private_file, public_file)
    return res

def getkey(key_path):
    private_file = key_path + "/" + PRIVATE_FILE
    public_file = key_path + "/" + PUBLIC_FILE
    return fcmp_getkey(private_file, public_file)

def encrypt(private, public, public_filename, filename):
    with open(public_filename, "rt") as fp:
        receiver_private = fp.read()
    receiver_private = fcmp_from_public(receiver_private)
    return fcmp_encrypt_file(private, public, receiver_private, filename)

def decrypt(private, filename):
    return fcmp_decrypt_file(private, filename)

def gethome():
    return os.path.expanduser("~")

def check_file(filename):
    if not os.path.exists(filename):
        print(filename + " File not found.")
        exit(1)
    return True

def getargs():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument("file", metavar="file", nargs="?", default=None, help=FILENAME_HELP)
    parser.add_argument("-kg", action="store_true", help=KEYGEN_HELP)
    parser.add_argument("-k", metavar="path", help=KEY_HELP)
    parser.add_argument("-e", metavar="public_key", help=ENCRYPT_HELP)
    parser.add_argument("-o", metavar="output", help=OUTPUT_HELP)

    return parser.parse_args(), parser

def main():
    args, parser = getargs()

    if args.k:
        key_path = args.k
    else:
        key_path = gethome() + "/" + DIR

    if not os.path.exists(key_path):
        os.makedirs(key_path, exist_ok=True)
        keygen(key_path)

    if args.kg:
        res = keygen(key_path)
        print(res)
        exit(0)

    private, public = getkey(key_path)
    filename = args.file

    if not filename:
        parser.print_help()
        exit(0)

    if args.e:
        check_file(args.e)
        check_file(filename)
        res = encrypt(private, public, args.e, filename)
    else:
        check_file(filename)
        res = decrypt(private, filename)

    if args.o:
        if type(res) == type(""): res = res.encode()
        with open(args.o, "wb") as fp:
            fp.write(res)
    else:
        if type(res) != type(""): res = res.decode()
        print(res)

    exit(0)

if __name__ == "__main__":
    main()
